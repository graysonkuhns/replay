---
name: Nightly E2E Tests
permissions:
  contents: read
  id-token: write
  issues: write

'on':
  schedule:
    # Run nightly at 2 AM UTC (adjust as needed)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  nightly-e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        worker: [0, 1, 2]
    name: Nightly E2E Tests (Worker ${{ matrix.worker }})
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          cache: true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set GCP project environment variable
        run: echo "GCP_PROJECT=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Run E2E tests
        run: |
          chmod +x ./run_e2e_tests_subset.sh
          # Capture test output to log file for issue creation
          PARALLEL_TESTS=10 WORKER_INDEX=${{ matrix.worker }} TOTAL_WORKERS=3 ./run_e2e_tests_subset.sh 2>&1 | tee nightly-test-output-worker-${{ matrix.worker }}.log
        timeout-minutes: 50
        env:
          WORKER_INDEX: ${{ matrix.worker }}
          TOTAL_WORKERS: 3

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-e2e-test-results-${{ github.run_number }}-worker-${{ matrix.worker }}
          path: |
            *.log
            e2e_tests/*.log
            nightly-test-output-worker-*.log
          retention-days: 30

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            
            // Read test output log file
            let testOutput = '';
            let failureSummary = '';
            try {
              const logContent = fs.readFileSync(`nightly-test-output-worker-${process.env.WORKER_INDEX}.log`, 'utf8');
              
              // Extract failure information from the log
              const lines = logContent.split('\n');
              const failureLines = [];
              let failedTests = [];
              let seenFailures = new Set();
              
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                
                // Look for test failure patterns
                if (line.includes('--- FAIL:')) {
                  const testMatch = line.match(/--- FAIL: (\w+)/);
                  if (testMatch && !seenFailures.has(testMatch[1])) {
                    failedTests.push(testMatch[1]);
                    seenFailures.add(testMatch[1]);
                    failureLines.push(line);
                  }
                } else if (line.trim().startsWith('dlr_test.go:') || 
                          line.trim().startsWith('move_test.go:') ||
                          line.trim().startsWith('e2e_tests/') ||
                          line.includes('Error:') || 
                          line.includes('Failed to') ||
                          line.includes('rpc error:') ||
                          line.includes('panic:') ||
                          line.includes('exit status')) {
                  failureLines.push(line);
                }
              }
              
              // Limit the output to avoid GitHub API limits (GitHub issues have ~65k limit)
              const maxLength = 3000;
              if (failureLines.length > 0) {
                testOutput = failureLines.join('\n');
                if (testOutput.length > maxLength) {
                  testOutput = '...\n' + testOutput.slice(testOutput.length - maxLength + 4);
                }
              }
              
              // Create failure summary
              if (failedTests.length > 0) {
                failureSummary = `**Failed Tests:** ${failedTests.join(', ')}\n\n`;
              }
              
            } catch (error) {
              console.log('Could not read test output log:', error.message);
              testOutput = 'Test output log not available. Check the workflow artifacts for detailed logs.';
            }
            
            // Create an issue if nightly tests fail
            const title = `Nightly E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `The nightly E2E tests failed on ${new Date().toISOString().split('T')[0]}.

            **Run URL:** ${runUrl}
            
            **Run ID:** ${context.runId}
            
            ${failureSummary}**Test Failure Output:**
            \`\`\`
            ${testOutput}
            \`\`\`
            
            **Next Steps:**
            1. Check the complete logs in the workflow artifacts: [Test Results](${runUrl}#artifacts)
            2. Review the failing tests and error messages above
            3. Run the failing tests locally to reproduce the issue
            4. Fix the underlying issue and verify with local test runs
            
            This issue was automatically created by the nightly E2E test workflow.`;
            
            // Check if there's already an open issue for today's date
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'nightly-test-failure'
            });
            
            const today = new Date().toISOString().split('T')[0];
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(today)
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner,
                repo,
                title,
                body,
                labels: ['nightly-test-failure', 'bug']
              });
            }

  nightly-e2e-tests-summary:
    name: Nightly E2E Tests Summary
    runs-on: ubuntu-latest
    needs: nightly-e2e-tests
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nightly-e2e-test-results-${{ github.run_number }}-worker-*
          merge-multiple: true

      - name: Check test results and create issue
        if: needs.nightly-e2e-tests.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            
            // Merge test outputs from all workers
            let allTestOutput = '';
            let allFailedTests = [];
            let seenFailures = new Set();
            
            for (let worker = 0; worker < 3; worker++) {
              try {
                const logFile = `nightly-test-output-worker-${worker}.log`;
                const logContent = fs.readFileSync(logFile, 'utf8');
                
                // Extract failure information from the log
                const lines = logContent.split('\n');
                const failureLines = [];
                
                for (let i = 0; i < lines.length; i++) {
                  const line = lines[i];
                  
                  // Look for test failure patterns
                  if (line.includes('--- FAIL:')) {
                    const testMatch = line.match(/--- FAIL: (\w+)/);
                    if (testMatch && !seenFailures.has(testMatch[1])) {
                      allFailedTests.push(testMatch[1]);
                      seenFailures.add(testMatch[1]);
                      failureLines.push(`[Worker ${worker}] ${line}`);
                    }
                  } else if (line.trim().startsWith('dlr_test.go:') || 
                            line.trim().startsWith('move_test.go:') ||
                            line.trim().startsWith('e2e_tests/') ||
                            line.includes('Error:') || 
                            line.includes('Failed to') ||
                            line.includes('rpc error:') ||
                            line.includes('panic:') ||
                            line.includes('exit status')) {
                    failureLines.push(`[Worker ${worker}] ${line}`);
                  }
                }
                
                if (failureLines.length > 0) {
                  allTestOutput += `\n### Worker ${worker} Failures:\n` + failureLines.join('\n');
                }
                
              } catch (error) {
                console.log(`Could not read test output log for worker ${worker}:`, error.message);
              }
            }
            
            // Limit the output to avoid GitHub API limits
            const maxLength = 4000;
            if (allTestOutput.length > maxLength) {
              allTestOutput = '...\n' + allTestOutput.slice(allTestOutput.length - maxLength + 4);
            }
            
            // Create failure summary
            let failureSummary = '';
            if (allFailedTests.length > 0) {
              failureSummary = `**Failed Tests (${allFailedTests.length} total):** ${allFailedTests.join(', ')}\n\n`;
            }
            
            // Create an issue if nightly tests fail
            const title = `Nightly E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `The nightly E2E tests failed on ${new Date().toISOString().split('T')[0]}.

            **Run URL:** ${runUrl}
            
            **Run ID:** ${context.runId}
            
            ${failureSummary}**Test Failure Output:**
            \`\`\`
            ${allTestOutput || 'No test output available. Check the workflow artifacts for detailed logs.'}
            \`\`\`
            
            **Next Steps:**
            1. Check the complete logs in the workflow artifacts: [Test Results](${runUrl}#artifacts)
            2. Review the failing tests and error messages above
            3. Run the failing tests locally to reproduce the issue
            4. Fix the underlying issue and verify with local test runs
            
            This issue was automatically created by the nightly E2E test workflow.`;
            
            // Check if there's already an open issue for today's date
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'nightly-test-failure'
            });
            
            const today = new Date().toISOString().split('T')[0];
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(today)
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner,
                repo,
                title,
                body,
                labels: ['nightly-test-failure', 'bug']
              });
            }